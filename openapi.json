{
  "openapi": "3.1.0",
  "info": {
    "title": "ModelRunner Requests API",
    "version": "1.0.0",
    "description": "Endpoints to create, track, retrieve, and cancel inference requests on ModelRunner."
  },
  "servers": [
    { "url": "https://queue.modelrunner.run" }
  ],
  "security": [
    { "apiKeyAuth": [] }
  ],
  "paths": {
    "/{ownerName}/{modelName}": {
      "post": {
        "summary": "Create Request",
        "description": "Enqueue a new inference job for the specified model. Request body must match the model's PredictionRequest schema.",
        "parameters": [
          { "$ref": "#/components/parameters/ownerName" },
          { "$ref": "#/components/parameters/modelName" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Model-specific input. Validated against the model's PredictionRequest schema at runtime.",
                "additionalProperties": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreateRequestResponse" }
              }
            }
          },
          "402": { "$ref": "#/components/responses/InsufficientBalance" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "400": { "$ref": "#/components/responses/BadRequest" }
        }
      }
    },
    "/{ownerName}/{modelName}/requests/{requestId}/status": {
      "get": {
        "summary": "Get Request Status",
        "description": "Check the current status of an inference request.",
        "parameters": [
          { "$ref": "#/components/parameters/ownerName" },
          { "$ref": "#/components/parameters/modelName" },
          { "$ref": "#/components/parameters/requestId" }
        ],
        "responses": {
          "200": {
            "description": "Current request status",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreateRequestResponse" }
              }
            }
          },
          "404": { "$ref": "#/components/responses/NotFound" },
          "400": { "$ref": "#/components/responses/BadRequest" }
        }
      }
    },
    "/{ownerName}/{modelName}/requests/{requestId}": {
      "get": {
        "summary": "Get Request Result",
        "description": "Retrieve the final output and metadata for a completed request.",
        "parameters": [
          { "$ref": "#/components/parameters/ownerName" },
          { "$ref": "#/components/parameters/modelName" },
          { "$ref": "#/components/parameters/requestId" }
        ],
        "responses": {
          "200": {
            "description": "Completed result",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetResultResponse" }
              }
            }
          },
          "409": { "$ref": "#/components/responses/NotCompleted" },
          "402": { "$ref": "#/components/responses/InsufficientBalance" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "400": { "$ref": "#/components/responses/BadRequest" }
        }
      }
    },
    "/{ownerName}/{modelName}/requests/{requestId}/cancel": {
      "get": {
        "summary": "Cancel Request",
        "description": "Attempt to cancel an in-queue or in-progress request. Returns the current status payload.",
        "parameters": [
          { "$ref": "#/components/parameters/ownerName" },
          { "$ref": "#/components/parameters/modelName" },
          { "$ref": "#/components/parameters/requestId" }
        ],
        "responses": {
          "200": {
            "description": "Cancellation attempted; current status returned",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreateRequestResponse" }
              }
            }
          },
          "404": { "$ref": "#/components/responses/NotFound" },
          "400": { "$ref": "#/components/responses/BadRequest" }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Use the format: Key modelrunner_key"
      }
    },
    "parameters": {
      "ownerName": {
        "name": "ownerName",
        "in": "path",
        "required": true,
        "schema": { "type": "string" },
        "description": "Model owner or organization name."
      },
      "modelName": {
        "name": "modelName",
        "in": "path",
        "required": true,
        "schema": { "type": "string" },
        "description": "Model alias on ModelRunner."
      },
      "requestId": {
        "name": "requestId",
        "in": "path",
        "required": true,
        "schema": { "type": "string", "minLength": 21, "maxLength": 21 },
        "description": "The request identifier returned by Create Request."
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Invalid input or request body",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/ErrorResponse" }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/ErrorResponse" }
          }
        }
      },
      "InsufficientBalance": {
        "description": "Insufficient balance for request",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/ErrorResponse" }
          }
        }
      },
      "NotCompleted": {
        "description": "Request is not completed",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/ErrorResponse" }
          }
        }
      }
    },
    "schemas": {
      "CreateRequestResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["IN_QUEUE", "IN_PROGRESS", "COMPLETED", "FAILED", "CANCELLED"]
          },
          "request_id": { "type": "string", "minLength": 21, "maxLength": 21 },
          "response_url": { "type": "string", "format": "uri" },
          "status_url": { "type": "string", "format": "uri" },
          "cancel_url": { "type": "string", "format": "uri" },
          "logs": { "type": "string" },
          "metrics": {
            "type": "object",
            "properties": {
              "inference_time": { "type": "number" }
            }
          },
          "queue_position": { "type": "number" }
        },
        "required": ["status", "request_id", "response_url", "status_url", "cancel_url"]
      },
      "GetResultResponse": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "minLength": 21, "maxLength": 21 },
          "modelEndpoint": { "type": "string" },
          "status": {
            "type": "string",
            "enum": ["IN_QUEUE", "IN_PROGRESS", "COMPLETED", "FAILED", "CANCELLED"]
          },
          "output": {},
          "input": {},
          "createdAt": { "type": "string", "format": "date-time" },
          "inferenceTime": { "type": "number" },
          "delayTime": { "type": "number" },
          "updatedAt": { "type": "string", "format": "date-time" },
          "logs": { "type": "string" },
          "error": { "type": "string" }
        },
        "required": ["id", "modelEndpoint", "status", "output", "input", "createdAt"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": { "type": "string" },
          "message": { "type": "string" },
          "statusCode": { "type": "number" },
          "details": {}
        },
        "required": ["error", "message", "statusCode"]
      }
    }
  }
}


